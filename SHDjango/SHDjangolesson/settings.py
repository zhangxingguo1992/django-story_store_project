"""
Django settings for SHDjangolesson project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
#  变量值项目的根目录，也就是settings.py的存放位置。
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))     # 将apps目录加入环境变量，忽略apps这个文件夹路径
sys.path.insert(1, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '0!u=1*ym=5y01fh$9&rm2*foz)ba_)y+3nihaskz0u9t$k^_ei'
# SECURITY WARNING: don't run with debug turned on in production!


# 解决JSON序列化问题,  否则我们在使用 Session 来保存一个 Object 时，会出现上述 JSON 序列化的错误。
SESSION_SERIALIZER  = 'django.contrib.sessions.serializers.PickleSerializer'

DEBUG = True

ALLOWED_HOSTS = ['0.0.0.0']

APIKEY = '344d317dba9f9ef45b096602becfa250'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app01',
    'xadmin',
    'crispy_forms',
    'message',
    'statistic',
    'DjangoUeditor',
    'comments'
    # 'djcelery',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'SHDjangolesson.urls'


from django.contrib.messages import constants as message_constants
MESSAGE_LEVEL = message_constants.INFO

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SHDjangolesson.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'python1802',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '10.11.58.84',
        'PORT': '3306',
    }
}


import redis
R = redis.Redis(host='127.0.0.1', port=6379, db=1)


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False  # 如果等于True，时差差8小时


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'     # 静态文件的前缀，静态文件默认在此目录下，末尾必须加上斜杠
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),    # 具体路径，app共有的静态文件，比如：jqurey.js
    # '/path/to/others/static/',#其他静态文件的路径

]
STATIC_ROOT='/static/'

# MEDIA_ROOT = os.path.join(BASE_DIR, '/apps/app01/static')   # 上传的文件的储存位置
MEDIA_ROOT = os.path.join(BASE_DIR, 'static')


SEX_CHOICES = [
   ('M', '男人'),
   ('F', '女人'),
]

FLAGS_CHOICES = [
	(0, '普通会员'),
    (1, '白银会员'),
	(2, '黄金会员')
]

DINNER_CHOICES = [
    (0, '待下单'),
	(1, '已下单')
]

PAY_CHOICES = [
    (0, '货到付款'),
    (1, '微信支付'),
    (2, '支付宝支付'),
]


REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 2
}



'''
#########################
## Django Logging  BEGIN
#########################
#LOGGING_DIR 日志文件存放目录
LOGGING_DIR = "./logs"
if not os.path.exists(LOGGING_DIR):
    os.mkdir(LOGGING_DIR)

import logging

# settings.py 中添加以下配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers':False,
    'formatters': {
        'standard': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d]> %(message)s'
        },
        'simple': {
            'format': '[%(levelname)s]> %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file_handler': {
             'level': 'INFO',
             'class': 'logging.handlers.TimedRotatingFileHandler',
             'filename': '%s/django.admin.log' % LOGGING_DIR,
             'formatter':'standard'
        }, # 用于文件输出
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
             'formatter':'standard'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console','file_handler'],
            'level':'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
    }
}

logger = logging.getLogger("django")

#########################
## Django Logging  END
#########################
'''


'''
#############################
# celery 配置信息 start
#############################
import djcelery
djcelery.setup_loader()
BROKER_URL = 'redis://127.0.0.1:6379/1'
CELERY_IMPORTS = ('app01.app_tasks.tasks')
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
from celery.schedules import crontab
from celery.schedules import timedelta

CELERYBEAT_SCHEDULE = {    #定时器策略
    #定时任务一：　每隔30s运行一次
    u'测试定时器1': {
        "task": "app01.app_tasks.tasks.tsend_email",
        #"schedule": crontab(minute='*/2'),  # or 'schedule':   timedelta(seconds=3),
        "schedule":timedelta(seconds=30),
        "args": (),
    },
}
#############################
# celery 配置信息 end
#############################

'''